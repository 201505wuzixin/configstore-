'use strict';
const path = require('path');  
//Path对象，用于处理目录的对象 //方法：路径合并 path.join([path1], [path2], […])  
const os = require('os');  
//os 模块提供了一些基本的系统操作函数   
//方法：1. os.tmpdir()  
          返回操作系统的默认临时文件夹。  
       2.os.hostname()  
          返回操作系统的主机名。  
       3.os.type()  
          返回操作系统名  
const fs = require('graceful-fs');  
//引入文件模块
const makeDir = require('make-dir');
//引入新建文件夹的模块
const xdgBasedir = require('xdg-basedir');
//不明白
const writeFileAtomic = require('write-file-atomic');
//这是节点的扩展fs.writeFile，使其操作原子化，并允许您设置所有权（文件的uid/gid）
//方法：writeFileAtomic（filename，data，[options]，callback）
const dotProp = require('dot-prop');
//通过一些扩展名的点支持访问属性的方法。
const uniqueString = require('unique-string');
//返回给定输入字符串作为前缀的唯一字符串。
const configDir = xdgBasedir.config || path.join(os.tmpdir(), uniqueString());
//xdgbasedir配置或者路径合并path.join（返回操作系统的默认临时文件夹，返回给定输入字符串作为前缀的唯一字符串）
const permissionError = 'You don\'t have access to this file.';
//您没有访问此文件的权限。
const makeDirOptions = {mode: 0o0700};
const writeFileOptions = {mode: 0o0600};
//mode命令用于配置系统设备

class Configstore { //定义configstore类
	constructor(id, defaults, opts) {//引入构造器
		opts = opts || {};
    
		const pathPrefix = opts.globalConfigPath ? path.join(id, 'config.json') : path.join('configstore', `${id}.json`);
    //全局配置文件的路径如果不为空，路径就为当前进程id的默认配置文件路径；否则为当前定义类的id的路径
    
		this.path = path.join(configDir, pathPrefix);
    //合并路径
		this.all = Object.assign({}, defaults, this.all);
    //对this.all进行拷贝
	}
  
	get all() { // 获取值
		try {
			return JSON.parse(fs.readFileSync(this.path, 'utf8')); 
      // 把文件路径转换成字符串
		} catch (err) { //捕获错误
			// Create dir if it doesn't exist //创建目录，如果它不存在
			if (err.code === 'ENOENT') {//没找到文件或路径
				makeDir.sync(path.dirname(this.path), makeDirOptions);
				return {};
			}

			// Improve the message of permission errors //改进许可错误的消息
			if (err.code === 'EACCES') {//权限被拒绝
				err.message = `${err.message}\n${permissionError}\n`;
			}

			// Empty the file if it encounters invalid JSON //如果文件遇到无效的JSON，请将其清空
			if (err.name === 'SyntaxError') {//语法错误
				writeFileAtomic.sync(this.path, '', writeFileOptions);
				return {};
			}

			throw err;//抛出错误
		}
	}
	set all(val) { //写入属性
		try {
			// Make sure the folder exists as it could have been deleted in the meantime
      // 确保文件夹存在，因为在此期间它可能已被删除
			makeDir.sync(path.dirname(this.path), makeDirOptions);

			writeFileAtomic.sync(this.path, JSON.stringify(val, null, '\t'), writeFileOptions);
		} catch (err) {
			// Improve the message of permission errors //改进许可错误的消息
			if (err.code === 'EACCES') {
				err.message = `${err.message}\n${permissionError}\n`;
			}

			throw err;
		}
	}
	get size() { 获取属性值的长度
		return Object.keys(this.all || {}).length;
	}
	get(key) { 获取属性值
		return dotProp.get(this.all, key);
	}
	set(key, val) { 设置属性及属性值
		const config = this.all;

		if (arguments.length === 1) {
			for (const k of Object.keys(key)) {
				dotProp.set(config, k, key[k]);
			}
		} else {
			dotProp.set(config, key, val);
		}

		this.all = config;
	}
	has(key) { //判断是否包含某属性值
		return dotProp.has(this.all, key);
	}
	delete(key) { //删除属性及属性值
		const config = this.all;
		dotProp.delete(config, key);
		this.all = config;
	}
	clear() { 清除程序
		this.all = {};
	}
}

module.exports = Configstore; //暴露该模块
